<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Post extends \App\Entity\Post implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_title', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_slug', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_content', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_type', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_status', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_thumbnail', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'created', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'updated', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_author', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_category'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_title', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_slug', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_content', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_type', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_status', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_thumbnail', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'created', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'updated', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_author', '' . "\0" . 'App\\Entity\\Post' . "\0" . 'post_category'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Post $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getPostTitle(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostTitle', []);

        return parent::getPostTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setPostTitle(string $post_title): \App\Entity\Post
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPostTitle', [$post_title]);

        return parent::setPostTitle($post_title);
    }

    /**
     * {@inheritDoc}
     */
    public function getPostContent(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostContent', []);

        return parent::getPostContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setPostContent(string $post_content): \App\Entity\Post
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPostContent', [$post_content]);

        return parent::setPostContent($post_content);
    }

    /**
     * {@inheritDoc}
     */
    public function getPostStatus(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostStatus', []);

        return parent::getPostStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setPostStatus(string $post_status): \App\Entity\Post
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPostStatus', [$post_status]);

        return parent::setPostStatus($post_status);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated(\DateTimeInterface $created): \App\Entity\Post
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', []);

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated(\DateTimeInterface $updated): \App\Entity\Post
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updated]);

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function getPostAuthor(): ?\App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostAuthor', []);

        return parent::getPostAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setPostAuthor(?\App\Entity\User $post_author): \App\Entity\Post
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPostAuthor', [$post_author]);

        return parent::setPostAuthor($post_author);
    }

    /**
     * {@inheritDoc}
     */
    public function getPostSlug(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostSlug', []);

        return parent::getPostSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setPostSlug(string $post_slug): \App\Entity\Post
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPostSlug', [$post_slug]);

        return parent::setPostSlug($post_slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getPostType(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostType', []);

        return parent::getPostType();
    }

    /**
     * {@inheritDoc}
     */
    public function setPostType(string $post_type): \App\Entity\Post
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPostType', [$post_type]);

        return parent::setPostType($post_type);
    }

    /**
     * {@inheritDoc}
     */
    public function getPostCategory(): ?\App\Entity\PostCategory
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostCategory', []);

        return parent::getPostCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setPostCategory(?\App\Entity\PostCategory $post_category): \App\Entity\Post
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPostCategory', [$post_category]);

        return parent::setPostCategory($post_category);
    }

    /**
     * {@inheritDoc}
     */
    public function getPostThumbnail(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostThumbnail', []);

        return parent::getPostThumbnail();
    }

    /**
     * {@inheritDoc}
     */
    public function setPostThumbnail(?string $post_thumbnail): \App\Entity\Post
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPostThumbnail', [$post_thumbnail]);

        return parent::setPostThumbnail($post_thumbnail);
    }

}
